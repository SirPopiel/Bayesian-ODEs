prova
prova = depth(mixbivexp, method='Tukey')
depth(mixbivexp[,2], method='Tukey')
mixbivexp[,2]
prova = depth(x=mixbivexp, method='Tukey')
prova = depth(u=mixbivexp, method='Tukey')
prova
prova = depth(mixbivexp, mixbivexp, method='Tukey')
prova
depth(c(0,0), mixbivexp, method='Tukey')
mixbivexp
# median (deepest point)
help("depthMedian")
depthMedian(mixbivexp, depth_params = list(method='Tukey')) # default=Tukey (halfspace) depth, other options are available
depth(c( 0.8364350, 0.9297927), mixbivexp, method='Tukey')
max(prova)
max(prova[,1])
prova[[0]]
prova[]
prova[][1]
prova[][2]
prova[][3]
prova[][4]
prova[][5]
prova[][6]
prova[][7]
prova
prova[1]
prova[]
prova['X']
prova$X
prova
a = mixbivexp
a[1]
a[1,]
depth(a[1,], a, method = 'Tukey')
depth(a[2,], a, method = 'Tukey')
prova[1,]
prova[1]
prova[2]
prova[3]
prova[4]
depth(a[4,], a, method = 'Tukey')
length(prova)
depth(a[500,], a, method = 'Tukey')
prova[500]
# median (deepest point)
help("depthMedian")
depthMedian(mixbivexp, depth_params = list(method='Tukey')) # default=Tukey (halfspace) depth, other options are available
#if you have the luck of having a bivariate dataset, you can easily visualize the depth surface in a very convenient way.
#DepthProc offers you two possible methods...
help('depthContour')
depthContour(mixbivexp, depth_params = list(method='Tukey'))
depthContour(mixbivexp, depth_params = list(method=c('Tukey', 'Oja')))
depthContour(mixbivexp, depth_params = list(method=c('Oja')))
depthContour(mixbivexp, depth_params = list(method='Oja'))
depthContour(mixbivexp, depth_params = list(method='tukey'))
depthContour(mixbivexp, depth_params = list(method='Tukey'))
depthContour(mixbivexp, depth_params = list(method='Oja'))
depthContour(mixbivexp, depth_params = list(method='oja'))
depthContour(mixbivexp, depth_params = list(method='Tukey'))
help('depthPersp')
depthPersp(mixbivexp, depth_params = list(method='Tukey'), plot_method = 'rgl')
depthContour(mixbivexp, depth_params = list(method='Tukey'))
depthPersp(mixbivexp, depth_params = list(method='Tukey'))
#what if I want to try a different depth?
depth(c(0,0),mixbivexp,method='Mahalanobis')
depthMedian(mixbivexp,depth_params = list(method='Mahalanobis'))
depthContour(mixbivexp,depth_params = list(method='Mahalanobis'))
depthPersp(mixbivexp,depth_params = list(method='Mahalanobis'))
depthPersp(mixbivexp,depth_params = list(method='Mahalanobis'),plot_method = 'rgl')
depthPredictiveContour(mixbivexp) #we are using the projection depth, way faster
source('~/Polimi/Nonparametric Statistics/Script Depth/depthPredictiveContour.R')
depthPredictiveContour(mixbivexp) #we are using the projection depth, way faster
set.seed(1992)
mixcauchy = cbind(rcauchy(n,location=0,scale=.001), rcauchy(n,location = 0,scale=.001))
head(mixcauchy)
#the cauchy distribution is an example of a distibution that does not have either the 1-moment (the mean) nor the 2-moment (the variance)
#this means that the CLT does not apply....
# Visualize a scatterplot of the data...
plot(mixcauchy[,1],mixcauchy[,2], xlab="x", ylab="y")
# now, let's try to start to have an idea of the density of this data.... starting with a hexagonal binning
library(hexbin)
bin=hexbin(mixcauchy[,1],mixcauchy[,2], xbins=10, xlab="exp 1", ylab="exp 2")
plot(bin, main="Hexagonal Binning")
depthContour(mixcauchy,depth_params = list(method='Tukey'))
depthPersp(mixcauchy,depth_params = list(method='Tukey'),plot_method = 'rgl')
depthPersp(mixcauchy,depth_params = list(method='Tukey'))
aplpack::bagplot(mixcauchy, show.outlier = F, xlim = c(-0.01,0.01), ylim = c(-0.01,0.01))
bp <- aplpack::bagplot(mixcauchy, show.outlier = F)
bp$pxy.outlier
aplpack::bagplot(mixcauchy, show.outlier = F, xlim = c(-0.01,0.01), ylim = c(-0.01,0.01))
bp <- aplpack::bagplot(mixcauchy, show.outlier = F)
bp$pxy.outlier
aplpack::bagplot(mixcauchy, show.outlier = F, xlim = c(-0.01,0.01), ylim = c(-0.01,0.01))
aplpack::bagplot(mixcauchy, show.outlier = T, xlim = c(-0.01,0.01), ylim = c(-0.01,0.01))
bp <- aplpack::bagplot(mixcauchy, show.outlier = F)
bp$pxy.outlier
aplpack::bagplot(mixcauchy, show.outlier = T, xlim = c(-0.01,0.01), ylim = c(-0.01,0.01))
# define mu and sigma
mu1 = c(0,0)
mu2 = c(5,5)
sigma = matrix(c(1,.7,.7,1), nc = 2)
sigma
frac = .05
n=100
# sample points
n1=ceiling(n*(1-frac))
n2=n-n1
mixbivnorm = rbind(mvrnorm(n1, mu1, sigma), mvrnorm(n2, mu2, sigma))
head(mixbivnorm)
# Visualize a scatterplot of the data...
color=rep(1,n)
color[1:n1]=2
plot(mixbivnorm[,1],mixbivnorm[,2] ,xlab="Norm 1", ylab="Norm 2",col=color)
depthContour(mixbivnorm,depth_params = list(method='Tukey'))
depthPersp(mixbivnorm,depth_params = list(method='Tukey'),plot_method = 'rgl')
aplpack::bagplot(mixbivnorm)
bgplot=aplpack::bagplot(mixbivnorm)
bgplot$pxy.outlier
data(starsCYG, package = "robustbase")
attach(starsCYG)
names(starsCYG)
View(starsCYG)
head(starsCYG)
plot(starsCYG, main="Star Cluster CYG OB1")
# Compute the depth of the bivariate mean wrt the sample
smean=apply(starsCYG,2,mean)
depth(smean, starsCYG, method = 'Tukey')
points(smean[1],smean[2], pch=19, col="green") #plot the barycenter
# find the Tukey's median
smed=depthMedian(starsCYG)
smed
points(smed[1],smed[2], pch=19, col="red") #plot the median
# perspective plot of the depth surface
depthContour(starsCYG, depth_params = list(method='Tukey'),points=T)
depthPersp(starsCYG,depth_params = list(method='Tukey'),plot_method = 'rgl')
detach(starsCYG)
x = matrix(rnorm(9999), nc = 3) #data in R^3
depthwrapper = function(row){depth::depth(row,x)}
st1 = system.time(apply(x[1:10,], 1, depthwrapper)) #let's clock it'
st1
#depth p
depthwrapper = function(row){depth::depth(row,x,approx=T)}
st2 = system.time(apply(x[1:10,], 1, depthwrapper))
st2
st1/st2 #second method is 60X faster
st3=system.time(depth(x[1:10,], x, method='Tukey'))
st3
#let's recover the data of example 2...
plot(mixbivnorm[,1],mixbivnorm[,2] ,xlab="Norm 1", ylab="Norm 2",col=color)
#we have seen that the contour plot of the DepthProc package can be generated like:
depthContour(mixbivnorm, depth_params = list(method='Tukey'))
#you can decide to tweak a LOT of possible options
#add points
depthContour(mixbivnorm, depth_params = list(method='Tukey'),points=T)
#change color scale levels
depthContour(mixbivnorm, depth_params = list(method='Tukey'),levels=5)
#decide what to show...
depthContour(mixbivnorm, depth_params = list(method='Tukey'),pmean=F,pdmedian=F)
#customize the colors...
gradfun=colorRampPalette(c('white','navy'))
depthContour(mixbivnorm, depth_params = list(method='Tukey'),colors=gradfun,levels=10)
depthContour(mixbivnorm, depth_params = list(method='Mahalanobis'),colors=gradfun,levels=10) #perfect ellipsoids in this case
#if you want to add additional parameters to the plot, the way to do it is...
depthContour(mixbivnorm, depth_params = list(method='Mahalanobis'),
graph_params = list(main='Contour Plot',xlab='x',ylab='y'),
colors=gradfun,levels=10)
#let's use the starsCYG dataset
aplpack::bagplot(starsCYG)
#let's now try to recreate a simple fence plot, and a simple sunburst plot
#bagplot
aplpack::bagplot(starsCYG,show.whiskers = F)
#sunburst
aplpack::bagplot(starsCYG,show.loophull = F)
p=3
mu=rep(0,3)
#let's now try to recreate a simple fence plot, and a simple sunburst plot
#bagplot
aplpack::bagplot(starsCYG,show.whiskers = F)
#sunburst
aplpack::bagplot(starsCYG,show.loophull = F)
p=3
mu=rep(0,3)
A=matrix(runif(p^2),ncol=p)
sigma=t(A) %*% A
trivar=mvrnorm(n=100,mu,sigma)
pairs(trivar)
aplpack::bagplot.pairs(trivar)
a = aplpack::bagplot.pairs(trivar)
a
a$pxy.outlier
trivar
aplpack::bagplot.pairs(trivar[,1:2])
aplpack::bagplot.pairs(trivar)
a = aplpack::bagplot(trivar[,1:2])
a$pxy.outlier
bivt=cbind(rt(100,2),rt(100,2))
bivnorm=cbind(rnorm(100),rnorm(100)) #will it change something if I use a gaussian with a different mean?
expnew <- cbind(rexp(100,2), rexp(100,2))
ddPlot(bivnorm,bivnorm,depth_params = list(method='Tukey'))
ddPlot(bivt,bivnorm,depth_params = list(method='Tukey'))
ddPlot(bivt,bivnorm,depth_params = list(method='Mahalanobis'))
ddPlot(expnew, expnew, depth_params = list(method='Tukey'))
ddPlot(expnew, expnew, depth_params = list(method='Tukey'))
ddPlot(expnew, expnew, depth_params = list(method='Tukey'))
ddPlot(expnew, expnew, depth_params = list(method='Tukey'))
ddPlot(bivnorm,bivnorm+2,depth_params = list(method='Tukey'))
ddPlot(bivnorm,bivnorm+3,depth_params = list(method='Tukey'))
ddPlot(bivt,bivnorm+1,depth_params = list(method='Tukey'))
ddPlot(bivnorm,bivnorm*2,depth_params = list(method='Tukey'))
ddPlot(bivnorm,bivnorm*3,depth_params = list(method='Tukey'))
ddPlot(bivt,bivnorm*4,depth_params = list(method='Tukey'))
ddPlot(bivt,bivnorm*0.5,depth_params = list(method='Tukey'))
ddPlot(bivt,bivnorm,depth_params = list(method='Tukey'))
ddPlot(bivt,bivnorm*1.1,depth_params = list(method='Tukey'))
ddPlot(bivt,bivnorm*1.2,depth_params = list(method='Tukey'))
ddPlot(bivt,bivnorm*1.3,depth_params = list(method='Tukey'))
dim(bivnorm)
biv_noise = mvtnorm::rmvnorm(100, mean = c(0,0), sigma = matric(c(0.1,0,0,0.1),2,2))
biv_noise = mvtnorm::rmvnorm(100, mean = c(0,0), sigma = matrix(c(0.1,0,0,0.1),2,2))
biv_noise
biv_noise1 = mvtnorm::rmvnorm(100, mean = c(0,0), sigma = matrix(c(0.1,0,0,0.1),2,2))
biv_noise2 = mvtnorm::rmvnorm(100, mean = c(0,0), sigma = matrix(c(0.1,0,0,0.1),2,2))
ddPlot(bivnorm+biv_noise1,bivnorm+biv_noise2,depth_params = list(method='Tukey'))
ddPlot(bivnorm+biv_noise1,bivnorm+biv_noise2,depth_params = list(method='Tukey'))
ddPlot(bivnorm+biv_noise1,bivnorm+biv_noise2,depth_params = list(method='Tukey'))
ddPlot(bivnorm+biv_noise1,bivnorm+biv_noise2,depth_params = list(method='Tukey'))
ddPlot(bivnorm+biv_noise1,bivnorm+biv_noise2,depth_params = list(method='Tukey'))
ddPlot(bivnorm+biv_noise1,bivnorm+biv_noise2,depth_params = list(method='Tukey'))
ddPlot(bivnorm+biv_noise1,bivnorm+biv_noise2,depth_params = list(method='Tukey'))
library(aplpack)
library(depth)
data <- cbind(rexp(100,rate=0.4), rnorm(100,mean=0,sd=2))
plot(data)
plot(data, pch=19, cex=0.5)
depth(data, method='Oja')
depth(data, method='Tukey')
depth(x=data, method='Tukey')
depth(u=data, method='Tukey')
depth(data, data, method='Tukey')
data
depth::depth(data, method='Tukey')
depth::depth(data, data, method='Tukey')
depth::depth(data[1,], data, method='Tukey')
depth::depth(data[2,], data, method='Tukey')
depth::depth(data[5,], data, method='Tukey')
depth(data, data, method='Tukey')
data
depth(data, data, method='Tukey')
data <- data.frame(data)
depth(data, data, method='Tukey')
data <- cbind(rexp(100,rate=0.4), rnorm(100,mean=0,sd=2))
depth(data, data, method='Tukey')
hexbin(data)
plot(hexbin(data))
plot(hexbin(data, xbins=12))
plot(hexbin(data, xbins=10))
plot(hexbin(data, xbins=5))
plot(hexbin(data, xbins=8))
plot(data, pch=19, cex=0.5)
data <- cbind(rexp(100,rate=0.4), rnorm(100,mean=0,sd=2))
plot(data, pch=19, cex=0.5)
plot(hexbin(data, xbins=8))
out <- cbind(rexp(5, rate = 0.7), rnorm(5, mean = 3, sd = 1))
data <- rbind(data,out)
plot(data, pch=19, cex=0.5)
data <- cbind(rexp(100,rate=0.4), rnorm(100,mean=0,sd=2))
out <- cbind(rexp(5, rate = 0.7), rnorm(5, mean = 3, sd = 1))
data <- rbind(data,out)
plot(data, pch=19, cex=0.5)
out <- cbind(rexp(5, rate = 0.7), rnorm(5, mean = -10, sd = 1))
data <- rbind(data,out)
plot(data, pch=19, cex=0.5)
data <- cbind(rexp(100,rate=0.4), rnorm(100,mean=0,sd=2))
out <- cbind(rexp(5, rate = 0.7), rnorm(5, mean = -10, sd = 1))
data <- rbind(data,out)
plot(data, pch=19, cex=0.5)
out <- cbind(rexp(5, rate = 0.7), rnorm(5, mean = -15, sd = 1))
data <- rbind(data,out)
plot(data, pch=19, cex=0.5)
plot(hexbin(data, xbins=8))
data <- cbind(rexp(100,rate=0.4), rnorm(100,mean=0,sd=2))
out <- cbind(rexp(5, rate = 0.7), rnorm(5, mean = -15, sd = 1))
data <- rbind(data,out)
plot(data, pch=19, cex=0.5)
plot(hexbin(data, xbins=8))
data <- cbind(rexp(100,rate=0.4), rnorm(100,mean=0,sd=2))
out <- cbind(rexp(5, rate = 0.7), rnorm(5, mean = -15, sd = 1))
data <- rbind(data,out)
plot(data, pch=19, cex=0.5)
data <- cbind(rexp(100,rate=0.4), rnorm(100,mean=0,sd=2))
out <- cbind(rexp(5, rate = 0.7), rnorm(5, mean = -10, sd = 1))
data <- rbind(data,out)
plot(data, pch=19, cex=0.5)
data <- cbind(rexp(100,rate=0.4), rnorm(100,mean=0,sd=2))
out <- cbind(rexp(5, rate = 0.7), rnorm(5, mean = -10, sd = 1))
data <- rbind(data,out)
plot(data, pch=19, cex=0.5)
plot(hexbin(data, xbins=8))
depth(data, data, method='Tukey')
data
n=500
mixbivexp = cbind(rexp(n), rexp(n))
head(mixbivexp)
head(data)
# Visualize a scatterplot of the data...
plot(mixbivexp[,1],mixbivexp[,2], xlab="exp 1", ylab="exp 2")
# now, let's try to start to have an idea of the density of this data.... starting with a hexagonal binning
library(hexbin)
bin=hexbin(mixbivexp[,1],mixbivexp[,2], xbins = 10, xlab="exp 1", ylab="exp 2")
plot(bin, main="Hexagonal Binning")
help(depth)
prova = depth(mixbivexp, mixbivexp, method='Tukey')
library(aplpack)
library(depth)
data <- cbind(rexp(100,rate=0.4), rnorm(100,mean=0,sd=2))
out <- cbind(rexp(5, rate = 0.7), rnorm(5, mean = -10, sd = 1))
data <- rbind(data,out)
plot(data, pch=19, cex=0.5)
plot(hexbin(data, xbins=8))
library(MASS)
plot(hexbin(data, xbins=8))
library(hexbin)
plot(hexbin(data, xbins=8))
depth(data, data, method='Tukey')
library(DepthProc)
data <- cbind(rexp(100,rate=0.4), rnorm(100,mean=0,sd=2))
out <- cbind(rexp(5, rate = 0.7), rnorm(5, mean = -10, sd = 1))
data <- rbind(data,out)
plot(data, pch=19, cex=0.5)
plot(hexbin(data, xbins=8))
library(aplpack)
library(DepthProc)
library(MASS)
library(hexbin)
# First of all let's compute some depths and the medians
data <- cbind(rexp(100,rate=0.4), rnorm(100,mean=0,sd=2))
out <- cbind(rexp(5, rate = 0.7), rnorm(5, mean = -10, sd = 1))
data <- rbind(data,out)
plot(data, pch=19, cex=0.5)
plot(hexbin(data, xbins=8))
# Let's find the depth associated with data
depths <- depth(data, data, method='Tukey')
TukeyMedian <- depthMedian(data, depth_params = list(method='Tukey'))
plot(data, pch=19, cex=0.5)
points(TukeyMedian[1], TukeyMedian[2], col='red', pch = 19)
Mean <- colMeans(data)
points(Mean[1], Mean[2], col='green', pch = 19)
# Now let's plot the bagplot of the data
bp <- aplpack::bagplot(data, show.outlier = F, show.whiskers = T)
outliers <- bp$pxy.outlier
bp$center
data_new <- data[-which(data %in% outliers),]
data_new
plot(data_new, pch=19, cex=0.5)
# Let's now visualize a 3D representation of data
depthPersp(data_new, depth_params = list(method='Tukey'))
depthPersp(data_new, depth_params = list(method='Tukey'), plot_method = 'rgl')
# Note that this is not a density!
# Let's now represent it with a contour plot
x11()
depthContour(data_new, depth_params = list(method='Tukey'))
# Now we'll plot a DDPlot of the data in order to compare multivariate distributions:
data <- cbind(rexp(100,rate=0.4), rnorm(100,mean=0,sd=2))
out <- cbind(rexp(5, rate = 0.7), rnorm(5, mean = -10, sd = 1))
data_compare <- rbind(data,out)
ddPlot(data_new, data_new+3, depth_params = list(method='Tukey'), location=F)
ddPlot(data_new, data_compare, depth_params = list(method='Tukey'), location=F, scale=F)
x <- c(runif(20,30,80), runif(30, 10, 70), runif(30, 50, 100), runif(20, 0, 60))
hist(x, breaks = 20)
y <- 0+(x >= 70)
y
B <- 10000
pb <- numeric(B)
library(progress)
pbar <- progress_bar$new(total=B)
y <- 0+(x >= 70)
B <- 10000
pb <- numeric(B)
library(progress)
pbar <- progress_bar$new(total=B)
pbar$tick(0)
for(i in 1:B) {
pbar$tick()
pb[i] <- (sample(y, replace=T))/length(y)
}
pb
y
B <- 10000
pb <- numeric(B)
library(progress)
pbar <- progress_bar$new(total=B)
pbar$tick(0)
for(i in 1:B) {
pbar$tick()
pb[i] <- sum(sample(y, replace=T))/length(y)
}
pb
p <- sum(y)/length(y)
c(inf = 2*p - quantile(pb, 0.975), sup = 2*p - quantile(pb, 0.025))
p
B <- 10000
pb <- numeric(B)
library(progress)
pbar <- progress_bar$new(total=B)
pbar$tick(0)
for(i in 1:B) {
pbar$tick()
pb[i] <- (mean(sample(y)) - p)/(mean(sample(y))*(1-mean(sample(y))))
}
c(inf = p - (p*(1-p))*quantile(pb, 0.975), sup = p - (p*(1-p))*quantile(pb, 0.025))
pb
mean(sample(y)) - p
mean(sample(y)) - p
B <- 10000
pb <- numeric(B)
library(progress)
pbar <- progress_bar$new(total=B)
pbar$tick(0)
for(i in 1:B) {
pbar$tick()
pb[i] <- (mean(sample(y, replace = T)) - p)/(mean(sample(y))*(1-mean(sample(y))))
}
c(inf = p - (p*(1-p))*quantile(pb, 0.975), sup = p - (p*(1-p))*quantile(pb, 0.025))
B <- 10000
pb <- numeric(B)
library(progress)
pbar <- progress_bar$new(total=B)
pbar$tick(0)
for(i in 1:B) {
pbar$tick()
pb[i] <- (mean(sample(y, replace = T)) - p)/sqrt(mean(sample(y))*(1-mean(sample(y)))/length(y))
}
c(inf = p - sqrt(p*(1-p)/length(y))*quantile(pb, 0.975), sup = p - sqrt(p*(1-p)/length(y))*quantile(pb, 0.025))
xtab <- as.table(rbind(c(490, 10), c(400, 100)))
xtab
dimnames(xtab) <- list(
group = c("grp1", "grp2"),
smoker = c("yes", "no")
)
xtab
fisher_test(xtab, detailed = TRUE)
library(rstatix)
fisher_test(xtab, detailed = TRUE)
fisher_test(xtab, detailed = TRUE)[3]
fisher_test(xtab, detailed = TRUE)[2]
fisher_test(xtab, detailed = TRUE)[2]+1
fisher_test(xtab, detailed = TRUE)[2]
covid_data_regions <- read.csv("C:/Users/fedfa/OneDrive/Desktop/covid_data_regions.csv")
View(covid_data_regions)
covid_data_regions <- read.csv("C:/Users/fedfa/OneDrive/Desktop/covid_data_regions.csv")
covid <- read.csv("C:/Users/fedfa/OneDrive/Desktop/covid_data_regions.csv")
covid$totale_positivi[which(covid$codice_regione==3)]
a <- covid$totale_positivi[which(covid$codice_regione==3)]
plot(1:length(a), a)
a <- covid$totale_positivi[which(covid$codice_regione==5)]
plot(1:length(a), a)
a <- covid$totale_positivi[which(covid$codice_regione==1)]
plot(1:length(a), a)
a <- covid$totale_positivi[which(covid$codice_regione==3)]
plot(1:length(a), a)
I <- covid$totale_positivi[which(covid$codice_regione==3)]
plot(1:length(I), I)
a <- covid$totale_positivi[which(covid$codice_regione==3)]
R <- covid$dimessi_guariti[which(covid$codice_regione==3)]
plot(1:length(R), R)
D <- covid$deceduti[which(covid$codice_regione==3)]
plot(1:length(R), R)
D <- covid$deceduti[which(covid$codice_regione==3)]
plot(1:length(D), D)
I <- covid$totale_positivi[which(covid$codice_regione==3)]
plot(1:length(I), I)
reg_code <- 14   # 3 = Lombardia, 1 = Piemonte, 5 = Veneto
covid <- read.csv("C:/Users/fedfa/OneDrive/Desktop/covid_data_regions.csv")
I <- covid$totale_positivi[which(covid$codice_regione==reg_code)]
plot(1:length(I), I)
R <- covid$dimessi_guariti[which(covid$codice_regione==reg_code)]
plot(1:length(R), R)
D <- covid$deceduti[which(covid$codice_regione==reg_code)]
plot(1:length(D), D)
R <- covid$dimessi_guariti[which(covid$codice_regione==reg_code)]
plot(1:length(R), R)
covid <- read.csv("C:/Users/fedfa/OneDrive/Desktop/covid_data_regions.csv")
I <- covid$totale_positivi[which(covid$codice_regione==reg_code)]
plot(1:length(I), I)
R <- covid$dimessi_guariti[which(covid$codice_regione==reg_code)]
plot(1:length(R), R)
D <- covid$deceduti[which(covid$codice_regione==reg_code)]
covid <- read.csv("C:/Users/fedfa/OneDrive/Desktop/covid_data_regions.csv")
I <- covid$totale_positivi[which(covid$codice_regione==reg_code)]
plot(1:length(I), I)
reg_code <- 3   # 3 = Lombardia, 1 = Piemonte, 5 = Veneto, 14 = Molise
covid <- read.csv("C:/Users/fedfa/OneDrive/Desktop/covid_data_regions.csv")
I <- covid$totale_positivi[which(covid$codice_regione==reg_code)]
plot(1:length(I), I)
R <- covid$dimessi_guariti[which(covid$codice_regione==reg_code)]
plot(1:length(R), R)
D <- covid$deceduti[which(covid$codice_regione==reg_code)]
plot(1:length(D), D)
region <- data.frame(I = I, R = R, D = D)
setwd("~/GitHub/BayNuDes/BDP_2/SIR")
setwd("~/GitHub/BayNuDes/BDP_2/SIR")
covid <- read.csv("C:/Users/fedfa/OneDrive/Desktop/covid_data_regions.csv")
I <- covid$totale_positivi[which(covid$codice_regione==reg_code)]
plot(1:length(I), I)
R <- covid$dimessi_guariti[which(covid$codice_regione==reg_code)]
plot(1:length(R), R)
D <- covid$deceduti[which(covid$codice_regione==reg_code)]
plot(1:length(D), D)
write.csv(region, 'Region.csv')
write.csv(region, 'Region.csv', row.names = FALSE)
